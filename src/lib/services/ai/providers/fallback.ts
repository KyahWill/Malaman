/**
 * Fallback Provider for when AI services are unavailable
 */

import { BaseAIProvider } from './base.js';
import type { AIResponse, AIGenerationOptions, ContentAnalysis, ContentAnalysisType } from '../types.js';

export class FallbackProvider extends BaseAIProvider {
  name = 'fallback';

  constructor() {
    super({
      apiKey: 'fallback',
      model: 'rule-based'
    });
  }

  async generateText(prompt: string, options: AIGenerationOptions = {}): Promise<AIResponse> {
    // Simple rule-based text generation for fallback scenarios
    let content = '';

    if (prompt.toLowerCase().includes('assessment') || prompt.toLowerCase().includes('question')) {
      content = this.generateFallbackAssessment(prompt);
    } else if (prompt.toLowerCase().includes('roadmap') || prompt.toLowerCase().includes('learning path')) {
      content = this.generateFallbackRoadmap(prompt);
    } else {
      content = 'This is a fallback response. AI services are currently unavailable. Please try again later or contact support.';
    }

    return {
      content,
      model: 'fallback-rule-based',
      finishReason: 'stop',
      usage: {
        promptTokens: prompt.length / 4, // Rough estimate
        completionTokens: content.length / 4,
        totalTokens: (prompt.length + content.length) / 4
      }
    };
  }

  async analyzeContent(content: string, analysisType: ContentAnalysisType): Promise<ContentAnalysis> {
    // Rule-based content analysis
    const wordCount = content.split(/\s+/).length;
    const estimatedReadingTime = Math.max(1, Math.ceil(wordCount / 200)); // 200 words per minute

    // Simple keyword-based topic extraction
    const keyTopics = this.extractKeyTopics(content);
    
    // Simple difficulty assessment based on content length and complexity
    const difficulty = this.assessDifficulty(content);

    // Generate basic learning objectives
    const learningObjectives = this.generateLearningObjectives(content, analysisType);

    return {
      keyTopics,
      difficulty,
      learningObjectives,
      concepts: keyTopics, // Use topics as concepts for simplicity
      estimatedReadingTime,
      contentType: this.determineContentType(content)
    };
  }

  private generateFallbackAssessment(prompt: string): string {
    return JSON.stringify({
      questions: [
        {
          type: 'multiple_choice',
          question: 'Based on the content provided, which of the following is most important?',
          options: [
            'Understanding the key concepts',
            'Memorizing all details',
            'Skipping to advanced topics',
            'Ignoring the fundamentals'
          ],
          correct_answer: 'Understanding the key concepts',
          explanation: 'Understanding key concepts provides a solid foundation for learning.'
        },
        {
          type: 'true_false',
          question: 'It is important to master basic concepts before moving to advanced topics.',
          correct_answer: 'true',
          explanation: 'Building a strong foundation is essential for effective learning progression.'
        }
      ],
      metadata: {
        generated_by: 'fallback_system',
        note: 'This is a basic assessment generated by the fallback system. For better quality assessments, please ensure AI services are available.'
      }
    });
  }

  private generateFallbackRoadmap(prompt: string): string {
    return JSON.stringify({
      learning_path: [
        {
          title: 'Foundation Review',
          description: 'Review fundamental concepts and prerequisites',
          estimated_time: 30,
          order: 1
        },
        {
          title: 'Core Content',
          description: 'Work through the main learning materials',
          estimated_time: 60,
          order: 2
        },
        {
          title: 'Practice and Assessment',
          description: 'Apply knowledge through exercises and assessments',
          estimated_time: 45,
          order: 3
        },
        {
          title: 'Advanced Topics',
          description: 'Explore advanced concepts and applications',
          estimated_time: 90,
          order: 4
        }
      ],
      total_estimated_time: 225,
      personalization_note: 'This is a generic learning path generated by the fallback system. For personalized recommendations, please ensure AI services are available.',
      generated_by: 'fallback_system'
    });
  }

  private extractKeyTopics(content: string): string[] {
    // Simple keyword extraction based on frequency and common educational terms
    const words = content.toLowerCase()
      .replace(/[^\w\s]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length > 3);

    const wordFreq: Record<string, number> = {};
    words.forEach(word => {
      wordFreq[word] = (wordFreq[word] || 0) + 1;
    });

    // Get most frequent words, excluding common stop words
    const stopWords = new Set(['this', 'that', 'with', 'have', 'will', 'from', 'they', 'know', 'want', 'been', 'good', 'much', 'some', 'time', 'very', 'when', 'come', 'here', 'just', 'like', 'long', 'make', 'many', 'over', 'such', 'take', 'than', 'them', 'well', 'were']);
    
    return Object.entries(wordFreq)
      .filter(([word]) => !stopWords.has(word))
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([word]) => word.charAt(0).toUpperCase() + word.slice(1));
  }

  private assessDifficulty(content: string): 'beginner' | 'intermediate' | 'advanced' {
    const wordCount = content.split(/\s+/).length;
    const avgWordLength = content.replace(/[^\w]/g, '').length / wordCount;
    const sentenceCount = content.split(/[.!?]+/).length;
    const avgSentenceLength = wordCount / sentenceCount;

    // Simple heuristic based on text complexity
    if (avgWordLength < 5 && avgSentenceLength < 15) {
      return 'beginner';
    } else if (avgWordLength < 7 && avgSentenceLength < 25) {
      return 'intermediate';
    } else {
      return 'advanced';
    }
  }

  private generateLearningObjectives(content: string, analysisType: ContentAnalysisType): string[] {
    const baseObjectives = [
      'Understand the key concepts presented in the content',
      'Apply the learned principles to practical scenarios'
    ];

    switch (analysisType) {
      case 'assessment_generation':
        return [
          ...baseObjectives,
          'Demonstrate knowledge through assessment completion',
          'Identify areas for further study'
        ];
      case 'roadmap_creation':
        return [
          ...baseObjectives,
          'Progress through learning materials systematically',
          'Build upon prerequisite knowledge'
        ];
      default:
        return baseObjectives;
    }
  }

  private determineContentType(content: string): 'theoretical' | 'practical' | 'mixed' {
    const practicalKeywords = ['example', 'practice', 'exercise', 'implement', 'build', 'create', 'develop', 'apply'];
    const theoreticalKeywords = ['concept', 'theory', 'principle', 'definition', 'explain', 'understand', 'analyze'];

    const practicalCount = practicalKeywords.reduce((count, keyword) => 
      count + (content.toLowerCase().match(new RegExp(keyword, 'g')) || []).length, 0);
    
    const theoreticalCount = theoreticalKeywords.reduce((count, keyword) => 
      count + (content.toLowerCase().match(new RegExp(keyword, 'g')) || []).length, 0);

    if (practicalCount > theoreticalCount * 1.5) {
      return 'practical';
    } else if (theoreticalCount > practicalCount * 1.5) {
      return 'theoretical';
    } else {
      return 'mixed';
    }
  }
}